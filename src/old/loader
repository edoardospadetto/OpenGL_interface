
//can be used just for the next function
template <typename T>
T to_number(const std::string & a){return 0;}

template<> int to_number<int>(const std::string & a){if(std::stoi(a) <=0 ) printf("Error %s\n", a.c_str()); return std::stoi(a);}
template<> float to_number<float>(const std::string & a){try{return std::stof(a);}catch(...){printf("%s\n", a);}}

template <typename T,typename A>
void appendval(char * line , std::vector<T,A> & list)
{	
	std::string  temp_in(line);
	std::string temp_s;
	
	char valid[13] = {'0','1','2','3','4','5','6','7','8','9','.','-','+'};
	size_t idx0 =0, idx1=1;
	bool present;
	int trianglescheck=0;
	int maxcnt=0, cnt =0;
	if(line[0] == 'v')
	{
		if(line[1] == 't'){maxcnt = 2;}
		else if(line[1] == 'n'){maxcnt = 3;}
		else{maxcnt = 3;} 
		idx0 = temp_in.find(" ",idx0,1)+1;
		while(cnt < maxcnt)
		{
		
			idx1 = temp_in.find(" ",idx0,1);
			if(idx1 > temp_in.length()){idx1 = temp_in.length(); }
			for (int j =idx0; j<idx1; j++){temp_s.push_back(line[j]);}
			
			
	
			list.push_back(to_number<T>(temp_s));
			temp_s.clear();
			idx0 = idx1+1;
			++cnt;
		}
		
		
	}
	else if(line[0] == 'f')
	{
	for (int j=0; j< temp_in.length(); j++){if(line[j] == '/'){++maxcnt;}}
	maxcnt=3*(maxcnt/2);
	idx0 = temp_in.find(" ",idx0,1)+1;
		while(cnt < maxcnt)
		{
			idx1 = temp_in.find(" ",idx0,1);
			
			if(idx1 >temp_in.find("/",idx0,1) ){idx1 = temp_in.find("/",idx0,1); }
			else if(idx1 > temp_in.length()){idx1 = temp_in.length(); }	
			
			for (int j =idx0; j<idx1; j++){temp_s+=line[j];}
			//printf(" %s %s,   %d %c %d %d, \n",temp_s.c_str(), temp_in.c_str(), idx1-idx0, line[idx1-1],cnt , maxcnt );
			++trianglescheck;
			if(trianglescheck == 10 )
			{	
				for (int k=3 ; k>0 ; k--)
				{ 
					list.push_back(list[list.size()-3]);
					//printf("%d\n", j );
				}
				for (int k=12 ; k>9 ; k--)
				{ 
					list.push_back(list[list.size()-12]);
					//printf("%d\n", j );
				}
				trianglescheck=0 ;
			}
			
			//printf("%s",temp_s);
			
			list.push_back(to_number<T>(temp_s));
			
			
			temp_s.clear();
			idx0 = idx1+1;
			
			++cnt;
		}
		
		/*for (int j=0 ; j<list.size() ; j++)
		{ 
			printf("rr %d \n", list[j]);
			//printf("%d\n", j );
		}
		char c;*/
		//std::cin >> c;
	} 
}
	
	
			/*
			
			
			std::string temp_s;
			for(int i =1 ; i<70; i++)
			{	
				present = false;
				for (int j=0; j< 13; j++){if(line[i] == valid[j]){present = true; break;}}
				
				if(present) // || line[i] == '-' || line[i] == '.' )
				{
					temp_s+=line[i];
				}
				else 
				{	//if (temp_s.length() == 1) {
					//for(int j =0 ; j<strlen(line); j++){
					//printf("%c", line[j]);}
					//printf(" %c %d %s \n", line[i-1], i-1, temp_s.c_str());}
					//printf("%s  %d %s  %c %s\n", temp_s.c_str(), i, line,line[i-1], std::isdigit(line[i-1]) ? "true" : "false");
					++cnt;
					++trianglescheck;
					if(trianglescheck == 10 )
					{	
						for (int j=3 ; j>0 ; j--)
						{ 
							list.push_back(list[list.size()-j]);
							//printf("%d\n", j );
						}
						for (int j=9 ; j>6 ; j--)
						{ 
							list.push_back(list[list.size()-j]);
							//printf("%d\n", j );
						}
						trianglescheck=0 ;
					}
					/*if( to_number<T>(temp_s) == 0 ) 
					{
						printf("%d  %c, ", i , line[i]);
					}
					list.push_back(to_number<T>(temp_s));
					if(cnt == maxcnt){break;}
					temp_s.clear();	
					
					//temp_s="";	
				}
				
				
			
		
		
		
		
			}*/
			//printf("%d  %d\n", cnt, list.size());




int Asset::LoadObj(std::string&& path)
{
	std::ifstream objfile;
	objfile.open(path);
	printf("%s\n",path.c_str());
	
	
	std::string temp_s;
	float temp_f; 
	int temp_i;
	
	std::vector<float> vertices;
	std::vector<float> normals;
	std::vector<float> texture;
	std::vector<int> indices;
	int expected[3] = {0,0,0};
	int a=0;
	if(objfile.is_open())
	{	
		//count lines with descriptors v vt vn
		char line[512];
		
		while(!objfile.eof())
		{
			//printf("%d\n",a);
			a++;	
			objfile.getline(line,512, '\n');
			//objfile.ignore(256,' '); 
			//printf("%s\n",line);
			if(line[0] == 'v')
			{
				if(line[1] == 't')
				{	
					expected[1]+=2;
					appendval( line , texture);
					//fscanf(file, "%f %f %f\n", &normal.x, &normal.y, &normal.z);
				}
				else if(line[1]=='n')
				{
					expected[2]+=3;
					appendval( line , normals);
					//fscanf(file, "%f %f %f\n", &normal.x, &normal.y, &normal.z);
				}
				else
				{	
					expected[0]+=3;
					appendval( line , vertices);
				}
			
			}
			else if(line[0] == 'f')
			{
				appendval( line , indices);			
			}
			
		}
		
		
	}
	else 
	{
		printf("file not foud\n");
	}

	
	

	/*
	printf("%ld, %ld , %ld\n", vertices.size() , normals.size(), indices.size()/3);
	int ***idxs = new int**[vertices.size()/3];
	for(int l=0; l< (vertices.size()/3); l++){
		idxs[l] = new int*[texture.size()/2];
		for(int m=0; m< (texture.size()/2); m++){
			idxs[l][m] = new int[(normals.size()/3)];
			for(int n=0; n< (normals.size()/3); n++)
			{
				idxs[l][m][n] =0;
					
			}
		}
	}
	printf("Error\n");
	
	
	int mem =0;
	for (int i =0; i<(indices.size()/3); i++)
	{
		//printf("a %d, %d , %d\n", indices[3*i]-1, indices[3*i+1]-1 , indices[3*i+2]-1);
		//printf("b %ld, %ld , %ld\n", vertices.size()/3 , texture.size()/2, normals.size()/3);
		//printf("c %d, %d , %d\n", expected[0], expected[1], expected[2]);
		if(idxs[(indices[3*i]-1)][(indices[3*i+1]-1)][(indices[3*i+2]-1)] == 0)
		{	
			++mem;
			idxs[(indices[3*i]-1)][(indices[3*i+1]-1)][(indices[3*i+2]-1)] = mem;
		}
		
		
	}
	printf("Error\n");
	int how_many=0;
	for(int l=0; l< (vertices.size()/3); l++){
		
		for(int m=0; m< (texture.size()/2); m++)
		{
			for(int n=0; n< (normals.size()/3); n++)
			{
				if(idxs[l][m][n] != 0){
					how_many +=1;
				}
			}
		}
	}
	*/
	// Allocate for vert, normals and textre.
	//printf("%ld \n", indices.size()%3);
	
	vert = new float [(indices.size()/3)*3];
	textr = new float[(indices.size()/3)*2];
	norm = new float[(indices.size()/3)*3];
	test = new float[(indices.size()/3)*5];
	
	//vert = new float [how_many*3];
	//textr = new float[how_many*2];
	//norm = new float[how_many*3];
	
	idx = new int[indices.size()/3];
	
	int norm_idx, textr_idx, vert_idx, idx_true;
	
	//fill up arrays.
	//printf("Error %d howmany\n", how_many);
	for (int i =0; i<(indices.size()/3); i++)
	{
		
		idx_true = i;//idxs[(indices[3*i]-1)][(indices[3*i+1]-1)][(indices[3*i+2]-1)]-1;
		//printf("%d idx_true\n", idx_true);

		vert_idx = (indices[3*i]-1);
		textr_idx = (indices[3*i+1]-1); 
		norm_idx = (indices[3*i+2]-1) ;//the normal i am considering
		
		idx[i]= norm_idx;
		vert[3*idx_true+0] = vertices[3*vert_idx]/3.0f;
		vert[3*idx_true+2] = vertices[3*vert_idx+1]/3.0f-4;
		vert[3*idx_true+1] = vertices[3*vert_idx+2]/3.0f;
		
		norm[3*idx_true] = normals[3*norm_idx];
		norm[3*idx_true+1] = normals[3*norm_idx+1];
		norm[3*idx_true+2] = normals[3*norm_idx+2];
		
		textr[2*idx_true] = texture[2*textr_idx];
		textr[2*idx_true+1] =  texture[2*textr_idx];
		
		test[3*idx_true+0] = vertices[3*vert_idx]/30.0f;
		test[3*idx_true+1] = vertices[3*vert_idx+1]/30.0f;
		test[3*idx_true+2] = vertices[3*vert_idx+2]/30.0f;
		test[3*idx_true+3] = 0.1;//texture[2*textr_idx];
		test[3*idx_true+4] = 0.1;//texture[2*textr_idx+1];//texture[2*textr_idx+1];

		//*if( 3*norm_idx+2 >= normals.size() || norm_idx<0 || 3*i >= indices.size()) {
			//printf("Errrr %f, %f \n", test[3*idx_true+4], test[3*idx_true+3]);
	//	}*/
		
	}
	//printf("%ld, %ld , %ld %ld\n", vertices.size() , texture.size(), normals.size(), indices.size()/3);
	//printf("hey %d, %d , %d\n", expected[0], expected[1], expected[2]);
	
	idxnum=indices.size()/3;
	vertnum=indices.size();
	
	printf("Error2\n");
	
	
	
	return 0;

}


